// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SimpleBudget.Data.Context;

#nullable disable

namespace SimpleBudget.Migrations
{
    [DbContext(typeof(SimpleBudgetContext))]
    [Migration("20230721010208_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "transaction_type", new[] { "credit", "debit" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SimpleBudget.Data.Entities.BudgetItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOnUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("DayOfMonth")
                        .HasColumnType("integer")
                        .HasColumnName("day_of_month");

                    b.Property<bool>("IsTransacted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_transacted");

                    b.Property<int>("MonthBudgetId")
                        .HasColumnType("integer")
                        .HasColumnName("month_budget_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<int>("TransactionType")
                        .HasColumnType("integer")
                        .HasColumnName("transaction_type");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on_utc")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id")
                        .HasName("pk_budget_items");

                    b.HasIndex("MonthBudgetId")
                        .HasDatabaseName("ix_budget_items_month_budget_id");

                    b.ToTable("budget_items", (string)null);
                });

            modelBuilder.Entity("SimpleBudget.Data.Entities.BudgetTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BufferAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("buffer_amount");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOnUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean")
                        .HasColumnName("is_default");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on_utc")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_budget_templates");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_budget_templates_user_id");

                    b.ToTable("budget_templates", (string)null);
                });

            modelBuilder.Entity("SimpleBudget.Data.Entities.MonthBudget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BufferAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("buffer_amount");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOnUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc")
                        .HasDefaultValueSql("now()");

                    b.Property<decimal>("CurrentBalance")
                        .HasColumnType("numeric")
                        .HasColumnName("current_balance");

                    b.Property<int>("Month")
                        .HasColumnType("integer")
                        .HasColumnName("month");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on_utc")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int>("Year")
                        .HasColumnType("integer")
                        .HasColumnName("year");

                    b.HasKey("Id")
                        .HasName("pk_month_budgets");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_month_budgets_user_id");

                    b.ToTable("month_budgets", (string)null);
                });

            modelBuilder.Entity("SimpleBudget.Data.Entities.TemplateItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<int>("BudgetTemplateId")
                        .HasColumnType("integer")
                        .HasColumnName("budget_template_id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOnUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("DayOfMonth")
                        .HasColumnType("integer")
                        .HasColumnName("day_of_month");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<int>("TransactionType")
                        .HasColumnType("integer")
                        .HasColumnName("transaction_type");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on_utc")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id")
                        .HasName("pk_template_items");

                    b.HasIndex("BudgetTemplateId")
                        .HasDatabaseName("ix_template_items_budget_template_id");

                    b.ToTable("template_items", (string)null);
                });

            modelBuilder.Entity("SimpleBudget.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOnUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on_utc")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "joseph.bales@gmail.com",
                            CreatedOnUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Joey",
                            Email = "joseph.bales@gmail.com",
                            FirstName = "Joseph",
                            LastName = "Bales",
                            UpdatedBy = "joseph.bales@gmail.com",
                            UpdatedOnUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("SimpleBudget.Data.Entities.BudgetItem", b =>
                {
                    b.HasOne("SimpleBudget.Data.Entities.MonthBudget", "MonthBudget")
                        .WithMany("BudgetItems")
                        .HasForeignKey("MonthBudgetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_budget_items_month_budgets_month_budget_id");

                    b.Navigation("MonthBudget");
                });

            modelBuilder.Entity("SimpleBudget.Data.Entities.BudgetTemplate", b =>
                {
                    b.HasOne("SimpleBudget.Data.Entities.User", "User")
                        .WithMany("BudgetTemplates")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_budget_templates_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SimpleBudget.Data.Entities.MonthBudget", b =>
                {
                    b.HasOne("SimpleBudget.Data.Entities.User", "User")
                        .WithMany("MonthBudgets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_month_budgets_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SimpleBudget.Data.Entities.TemplateItem", b =>
                {
                    b.HasOne("SimpleBudget.Data.Entities.BudgetTemplate", "BudgetTemplate")
                        .WithMany("TemplateItems")
                        .HasForeignKey("BudgetTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_template_items_budget_templates_budget_template_id");

                    b.Navigation("BudgetTemplate");
                });

            modelBuilder.Entity("SimpleBudget.Data.Entities.BudgetTemplate", b =>
                {
                    b.Navigation("TemplateItems");
                });

            modelBuilder.Entity("SimpleBudget.Data.Entities.MonthBudget", b =>
                {
                    b.Navigation("BudgetItems");
                });

            modelBuilder.Entity("SimpleBudget.Data.Entities.User", b =>
                {
                    b.Navigation("BudgetTemplates");

                    b.Navigation("MonthBudgets");
                });
#pragma warning restore 612, 618
        }
    }
}
